{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "caslowDataFactoryds598"
		},
		"Air Pollution Data_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Air Pollution Data'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"GitHubcaslow_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHubcaslow'"
		},
		"Air Pollution Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/ "
		},
		"Air Pollution Data_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Caslow"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://caslowds598storage.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://caslow.vault.azure.net/"
		},
		"GitHubcaslow_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "caslow"
		},
		"Weather Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/ "
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Air Pollution Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Air Pollution Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Air Pollution Data_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Air Pollution Data_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHubcaslow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHubcaslow_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHubcaslow_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDgwMjcxMTgyLUM0QjUtNEU3QS1CNEU3LTJDNkI4NUIyRDgxOV83NjMyYzlmMC04Yzg5LTQyODgtODkwNS00M2YzY2ExNjcxMDEiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Weather Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_AirPollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "history252ab25a6cd3f689d2908d2b86f1e2cbb562e18d26197813a5e6860fa86ad456",
						"folderPath": "2.5/air_pollution",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "number"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_Weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "2.5/history",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Weather Data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"appid": {
						"type": "string"
					},
					"dataType": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Weather Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Air Pollution Data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"start": {
						"type": "int"
					},
					"end": {
						"type": "int"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Air Pollution Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Silver_AirPollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "2.5/silver",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Silver_Weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "2.5/silver",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://caslow.vault.azure.net/secrets/OpenWeather?api-version=7.0",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {
									"lat": 42.3601,
									"lon": -71.0589,
									"start": {
										"value": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)",
										"type": "Expression"
									},
									"end": {
										"value": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')), 10000000)",
										"type": "Expression"
									},
									"appid": "@activity('Web1').output.value"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/Bronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,52)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"start": {
													"value": "@div(sub(ticks(\n    addDays(\n        addDays(\n            utcNow(), mul(\n                -7, item()\n                )\n        ), -7\n    )), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)",
													"type": "Expression"
												},
												"appid": {
													"value": "@activity('Web1').output.value",
													"type": "Expression"
												},
												"dataType": "hour"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Bronze",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://caslow.vault.azure.net/secrets/OpenWeather?api-version=7.0",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/Bronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution_Transform_Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Bronze_AirPollution",
								"type": "DatasetReference"
							},
							"name": "AirPollution"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Silver_AirPollution",
								"type": "DatasetReference"
							},
							"name": "SinkAirPollution"
						}
					],
					"transformations": [
						{
							"name": "CorrectAirPollution"
						},
						{
							"name": "FilterNullAirPollution"
						},
						{
							"name": "DerivedAirPollution"
						},
						{
							"name": "SelectionAirPollution"
						},
						{
							"name": "FlattenAirPollution"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lat as double, lon as double),",
						"          list as (components as (co as double, nh3 as double, no as double, no2 as double, o3 as double, pm10 as double, pm2_5 as double, so2 as double), dt as integer, main as (aqi as short))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> AirPollution",
						"FlattenAirPollution derive(corrected_timestamp = iif(((length(toString(timestamp))) == 10), toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> CorrectAirPollution",
						"CorrectAirPollution filter(!isNull(aqi) && !isNull(corrected_timestamp)) ~> FilterNullAirPollution",
						"FilterNullAirPollution derive(date_time = toTimestamp(toLong(corrected_timestamp)*1000),",
						"          id = location+toString(corrected_timestamp),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          co = round(co),",
						"          no = round(no),",
						"          no2 = round(no2),",
						"          o3 = round(o3),",
						"          so2 = round(so2),",
						"          pm2_5 = round(pm2_5),",
						"          pm10 = round(pm10),",
						"          nh3 = round(nh3)) ~> DerivedAirPollution",
						"DerivedAirPollution select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectionAirPollution",
						"AirPollution foldDown(unroll(list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          timestamp = list.dt",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenAirPollution",
						"SelectionAirPollution sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['AirPollution_Transformed'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkAirPollution"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Bronze_AirPollution')]",
				"[concat(variables('factoryId'), '/datasets/Silver_AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather_Transform_Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Bronze_Weather",
								"type": "DatasetReference"
							},
							"name": "Weather"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Silver_Weather",
								"type": "DatasetReference"
							},
							"name": "SinkWeather"
						}
					],
					"transformations": [
						{
							"name": "CorrectedWeather",
							"description": "Corrected Timestamp\nCorrected location"
						},
						{
							"name": "FilterNullWeather"
						},
						{
							"name": "DerivedWeather"
						},
						{
							"name": "SelectionWeather"
						},
						{
							"name": "FlattenWeather"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     preferredFractionalType: 'float') ~> Weather",
						"FlattenWeather derive(corrected_timestamp = iif(((length(toString(timestamp))) == 10), toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> CorrectedWeather",
						"CorrectedWeather filter(!isNull(temp) && !isNull(humidity) && !isNull(timestamp)) ~> FilterNullWeather",
						"FilterNullWeather derive(date_time = toTimestamp(toLong(corrected_timestamp)*1000),",
						"          id = location+toString(corrected_timestamp),",
						"          temp_C = round(temp-273.15),",
						"          feels_like_C = round(feels_like-273.15),",
						"          temp_min_C = round(temp_min-273.15),",
						"          temp_max_C = round(temp_max-273.15),",
						"          feels_like_F = round((feels_like - 273.15) * (9/5) + 32),",
						"          temp_F = round((temp - 273.15) * (9/5) + 32),",
						"          temp_max_F = round((temp_max - 273.15) * (9/5) + 32),",
						"          temp_min_F = round((temp_min - 273.15) * (9/5) + 32),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = toInteger(toString(weather_id)),",
						"          weather_main_value = toString(weather_main),",
						"          weather_icon_value = toString(weather_icon),",
						"          weather_description_value = toString(weather_description)) ~> DerivedWeather",
						"DerivedWeather select(mapColumn(",
						"          timestamp,",
						"          humidity,",
						"          pressure,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value,",
						"          wind_speed,",
						"          wind_deg,",
						"          clouds_all,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          feels_like_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          temp_F,",
						"          feels_like_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          lon,",
						"          lat",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectionWeather",
						"Weather foldDown(unrollMultiple(list,list.weather),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          clouds_all = list.clouds.all,",
						"          temp = list.main.temp,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenWeather",
						"SelectionWeather sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['Weather_Tranformed'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkWeather"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Bronze_Weather')]",
				"[concat(variables('factoryId'), '/datasets/Silver_Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution_Transform_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AirPollution_Transform_Load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AirPollution": {},
									"SinkAirPollution": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AirPollution_Transform_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather_Transform_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Weather_Transform_Load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Weather": {},
									"SinkWeather": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Weather_Transform_Load')]"
			]
		}
	]
}