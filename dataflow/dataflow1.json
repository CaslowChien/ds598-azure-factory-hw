{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Bronze_Weather",
						"type": "DatasetReference"
					},
					"name": "Weather"
				},
				{
					"dataset": {
						"referenceName": "Bronze_AirPollution",
						"type": "DatasetReference"
					},
					"name": "AirPollution"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Silver_Weather",
						"type": "DatasetReference"
					},
					"name": "SinkWeather"
				},
				{
					"dataset": {
						"referenceName": "Silver_AirPollution",
						"type": "DatasetReference"
					},
					"name": "SinkAirPollution"
				}
			],
			"transformations": [
				{
					"name": "FlattenWeather"
				},
				{
					"name": "FlattenAirPollution"
				},
				{
					"name": "CorrectedWeather",
					"description": "Corrected Timestamp\nCorrected location"
				},
				{
					"name": "FilterNullWeather"
				},
				{
					"name": "DerivedWeather"
				},
				{
					"name": "SelectionWeather"
				},
				{
					"name": "CorrectAirPollution"
				},
				{
					"name": "FilterNullAirPollution"
				},
				{
					"name": "DerivedAirPollution"
				},
				{
					"name": "SelectionAirPollution"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     preferredFractionalType: 'float',",
				"     wildcardPaths:['/*']) ~> Weather",
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as double, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> AirPollution",
				"Weather foldDown(unroll(),",
				"     mapColumn(",
				"          cod,",
				"          message,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          timestamp = list.dt,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_speed = list.wind.speed,",
				"          wind_deg = list.wind.deg,",
				"          clouds_all = list.clouds.all",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenWeather",
				"AirPollution foldDown(unroll(),",
				"     mapColumn(",
				"          timestamp = list.dt,",
				"          lon = coord.lon,",
				"          lat = coord.lat,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenAirPollution",
				"FlattenWeather derive(corrected_timestamp = iif(((length(toString(timestamp))) == 10), toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston') ~> CorrectedWeather",
				"CorrectedWeather filter(temp === toInteger(null()) || humidity === toInteger(null()) || timestamp === toInteger(null())) ~> FilterNullWeather",
				"FilterNullWeather derive(date_time = toTimestamp(toLong(corrected_timestamp)*1000),",
				"          id = location+toString(corrected_timestamp),",
				"          temp_C = round(temp-273.15),",
				"          feels_like_C = round(feels_like-273.15),",
				"          temp_min_C = round(temp_min-273.15),",
				"          temp_max_C = round(temp_max-273.15),",
				"          feels_like_F = round((feels_like - 273.15) * (9/5) + 32),",
				"          temp_F = round((temp - 273.15) * (9/5) + 32),",
				"          temp_max_F = round((temp_max - 273.15) * (9/5) + 32),",
				"          temp_min_F = round((temp_min - 273.15) * (9/5) + 32),",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          weather_id_value = toInteger(weather_id)) ~> DerivedWeather",
				"DerivedWeather select(mapColumn(",
				"          timestamp,",
				"          humidity,",
				"          pressure,",
				"          weather_id_value,",
				"          weather_main_value = weather_main,",
				"          weather_description_value = weather_description,",
				"          weather_icon_value = weather_icon,",
				"          wind_speed,",
				"          wind_deg,",
				"          clouds_all,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          feels_like_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          temp_F,",
				"          feels_like_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          lon,",
				"          lat",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectionWeather",
				"FlattenAirPollution derive(corrected_timestamp = iif(((length(toString(timestamp))) == 10), toInteger(timestamp), toInteger(null())),",
				"          location = 'Boston') ~> CorrectAirPollution",
				"CorrectAirPollution filter(aqi === toInteger(null()) || corrected_timestamp === toInteger(null())) ~> FilterNullAirPollution",
				"FilterNullAirPollution derive(date_time = toTimestamp(toLong(corrected_timestamp)*1000),",
				"          id = location+toString(corrected_timestamp),",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          co = round(co),",
				"          no = round(no),",
				"          no2 = round(no2),",
				"          o3 = round(o3),",
				"          so2 = round(so2),",
				"          pm2_5 = round(pm2_5),",
				"          pm10 = round(pm10),",
				"          nh3 = round(nh3)) ~> DerivedAirPollution",
				"DerivedAirPollution select(mapColumn(",
				"          lon,",
				"          lat,",
				"          aqi,",
				"          co,",
				"          no,",
				"          no2,",
				"          o3,",
				"          so2,",
				"          pm2_5,",
				"          pm10,",
				"          nh3,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectionAirPollution",
				"SelectionWeather sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkWeather",
				"SelectionAirPollution sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkAirPollution"
			]
		}
	}
}